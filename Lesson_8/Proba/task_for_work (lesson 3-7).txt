(каждый класс в отдельном файле)
Классы Train - поезд  (типа PassangerTrain и CargoTrain)
       RailwayStation - ж.д. станция
       Route - поезда  (типа PassangerTrain и CargoTrain)

Станция:
  * Имеет название, которое указывается при ее создании
  * Может принимать поезда
  * Может показывать список всех поездов на станции, находящиеся в текущий момент
  * Может показывать список поездов на станции по типу (см. ниже):
  кол-во грузовых, пассажирских
  * Может отправлять поезда (при этом, поезд удаляется из списка поездов,
  находящихся на станции).
Маршрут:
  * Имеет начальную и конечную станцию, а также список промежуточных станций
  * Может добавлять станцию в список
  * Может удалять станцию из списка
  * Может выводить список всех станций по-порядку от начальной до конечной
Поезд:
  * Имеет, тип, который указывается при создании: грузовой, пассажирский и количество вагонов.
  * Поезд может делать следующие вещи:
  * набирать скорость
  * показывать текущую скорость
  * тормозить
  * показывать количество вагонов
  * прицеплять/отцеплять вагоны (по одному вагону за операцию, метод просто увеличивает или уменьшает количество вагонов). Прицепка/отцепка вагонов может осуществляться только если поезд не движется. И только подход. по типу!
  * Принимать маршрут следования
  * Перемещаться между станциями, указанными в маршруте.
  * Показывать предыдущую станцию, текущую, следующую, на основе маршрута
- - - - - -
CLASS
  class Train:
    1).
  class RailwayStation:
    1). В классе RailwayStation (жд станция) создать метод класса all, который выводит список всех станций, созданных на данный момент
  class Route:
    1). Cоздать метод класса find, который принимает номер поезда и возвращает объект поезда по номеру или nil, если поезд с таким номером не найден.
- - - - - - -
VALIDATION
  Реализовать проверку (валидацию) данных для всех классов. Проверять основные атрибуты (название, номер, тип и т.п.) на наличие, длину и т.п. (в зависимости от атрибута):
    * Валидация должна взываться при создании объекта, если объект невалидный, то должно выбрасываться исключение
    * Должен быть метод valid? который возвращает true, если объект валидный и false - в противном случае.
    * Релизовать проверку на формат номера поезда. Допустимый формат: три буквы или цифры в любом порядке, необязательный дефис (может быть, а может нет) и еще 2 буквы или цифры после дефиса.
    * Релизовать интерфейс, который бы выводил пользователю ошибки валидации без прекращения работы программы.
    * Убрать из классов все puts (кроме методов, которые и должны что-то выводить на экран), методы просто возвращают значения. (Начинаем бороться за чистоту кода).
  UPDATE к заданию:
    - Дополнительно сделать следующее: при добавлениит вагонов к поезду и несовпадении типов также выбрасывать исключение.
    - Для класса маршрута сделать валидацию на то, что при добавлении станций объекты имеют тип (класс) RailwayStation (или как он у вас называется).
    - Добавить валидацию (с выбросом исключения) на глобальную уникальность номера поезда. То есть, нельзя создать 2 объекта класса Train с одинаковым номером.



- - - - - - -
Дополнительно:
  Определить, какие методы могут быть помещены в private/protected и вынести их в такую секцию.

???:
  Усложненное задание: создать программу в файле main.rb, которая будет позволять пользователю через текстовый интерфейс делать следующее:
    Создавать станции
    Создавать поезда
    Добавлять вагоны к поезду
    Отцеплять вагоны от поезда
    Помещать поезда на станцию
    Просматривать список станций и список поездов на станции

После работы дополнитеельно:
  1). Создать модуль, который позволит указывать название компании-производителя и получать его. Подключить модуль к классам Вагон и Поезд
  2). Усложенное задание: Создать модуль InstanceCounter, содержащий следующие методы класса и инстанс-методы, которые подключаются автоматически при вызове include в классе:
    * Методы класса:
      instances, который возвращает кол-во экземпляров данного класса
    * Инастанс-методы:
      register_instance, который увеличивает счетчик кол-ва экземпляров класса и который можно вызвать из конструктора. При этом, данный метод не должен быть публичным.
  3).
    * У класса RailwayStation написать метод, который принимает блок и выполняет действия из блока над каждым поездом (Train), находящимся в данный момент на станции.
    * У класса Train написать метод, который принимает блок и проходит по всем вагонам поезда, передавая каждый объект вагона в блок.
  4). Установить rubocop и проанализировать свои проект с его помощью
